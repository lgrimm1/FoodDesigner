/*
1. Generate the test file via IDE
2. Copy-paste the boilerplate code
3. Change the next words to correct ones and in the next order:
	- Domains
	- Domain
	- domain
*/

class SearchDomainsServiceTest {

	@Test
	void searchDomainsNullArgument() {
		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		SearchDomainsService service = new SearchDomainsService(repository, mapper);

		assertThrows(IllegalArgumentException.class, () -> service.searchDomains(null));
	}

	@Test
	void searchDomainsBlankArgument() {
		String text = "  ";

		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		SearchDomainsService service = new SearchDomainsService(repository, mapper);

		SearchDomainsDTO searchDomainsDTO = service.searchDomains(text);
		assertEquals("No text were given.", searchDomainsDTO.getMessage());
		assertTrue(searchDomainsDTO.getDomains().isEmpty());
		assertTrue(searchDomainsDTO.getSearchText().isEmpty());
	}

	@Test
	void searchDomainsNoMatch() {
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		when(repository.findAllByName("name"))
				.thenReturn(new ArrayList<DomainEntity>());

		SearchDomainsDTO searchDomainsDTO = new SearchDomainsDTO(new ArrayList<SearchDomainsElement>(), "", "Found 0 occurrence(s).");
		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		when(mapper.toSearchDomainsDTO(new ArrayList<DomainEntity>(), "Found 0 occurrence(s)."))
				.thenReturn(searchDomainsDTO);

		SearchDomainsService service = new SearchDomainsService(repository, mapper);
		SearchDomainsDTO actualSearchDomainsDTO = service.searchDomains("name");
		assertEquals(new ArrayList<SearchDomainsElement>(), actualSearchDomainsDTO.getDomains());
		assertEquals("Found 0 occurrence(s).", actualSearchDomainsDTO.getMessage());
		assertTrue(actualSearchDomainsDTO.getSearchText().isEmpty());
	}

	@Test
	void searchDomainsOneWord() {
		DomainEntity domainEntity1 = new DomainEntity(1L, "name", "webshop1", "openHours1");
		DomainEntity domainEntity2 = new DomainEntity(2L, "name", "webshop2", "openHours2");
		List<DomainEntity> domainEntities = new ArrayList<>();
		domainEntities.add(domainEntity1);
		domainEntities.add(domainEntity2);
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		when(repository.findAllByName("name"))
				.thenReturn(domainEntities);
		when(repository.findAllById(new HashSet<>(List.of(1L, 2L))))
				.thenReturn(domainEntities);

		SearchDomainsElement searchDomainsElement1 = new SearchDomainsElement(1L, "name");
		SearchDomainsElement searchDomainsElement2 = new SearchDomainsElement(2L, "name");
		List<SearchDomainsElement> searchDomainsElements = new ArrayList<>();
		searchDomainsElements.add(searchDomainsElement1);
		searchDomainsElements.add(searchDomainsElement2);
		SearchDomainsDTO searchDomainsDTO = new SearchDomainsDTO(searchDomainsElements, "", "Found 2 occurrence(s).");
		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		when(mapper.toSearchDomainsDTO(domainEntities, "Found 2 occurrence(s)."))
				.thenReturn(searchDomainsDTO);

		SearchDomainsService service = new SearchDomainsService(repository, mapper);
		SearchDomainsDTO actualSearchDomainsDTO = service.searchDomains("name");
		assertEquals(searchDomainsDTO.getDomains(), actualSearchDomainsDTO.getDomains());
		assertEquals("Found 2 occurrence(s).", actualSearchDomainsDTO.getMessage());
		assertTrue(actualSearchDomainsDTO.getSearchText().isEmpty());
	}

	@Test
	void searchDomainsMoreWordsWithMoreSpacesBetween() {
		DomainEntity domainEntity1 = new DomainEntity(1L, "name", "webshop1", "openHours1");
		DomainEntity domainEntity2 = new DomainEntity(2L, "name", "webshop2", "openHours2");
		DomainEntity domainEntity3 = new DomainEntity(3L, "xyz", "webshop3", "openHours3");
		DomainEntity domainEntity4 = new DomainEntity(4L, "name   xyz", "webshop4", "openHours4");
		List<DomainEntity> domainEntities = new ArrayList<>();
		domainEntities.add(domainEntity1);
		domainEntities.add(domainEntity2);
		domainEntities.add(domainEntity3);
		domainEntities.add(domainEntity4);
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		when(repository.findAllByName("name   xyz"))
				.thenReturn(domainEntities.subList(3, 4));
		when(repository.findAllByName("name"))
				.thenReturn(domainEntities.subList(0, 2));
		when(repository.findAllByName("xyz"))
				.thenReturn(domainEntities.subList(2, 3));
		when(repository.findAllById(new HashSet<>(Set.of(4L, 1L, 2L, 3L))))
				.thenReturn(domainEntities);

		SearchDomainsElement searchDomainsElement1 = new SearchDomainsElement(4L, "name   xyz");
		SearchDomainsElement searchDomainsElement2 = new SearchDomainsElement(1L, "name");
		SearchDomainsElement searchDomainsElement3 = new SearchDomainsElement(2L, "name");
		SearchDomainsElement searchDomainsElement4 = new SearchDomainsElement(3L, "xyz");
		List<SearchDomainsElement> searchDomainsElements = new ArrayList<>();
		searchDomainsElements.add(searchDomainsElement1);
		searchDomainsElements.add(searchDomainsElement2);
		searchDomainsElements.add(searchDomainsElement3);
		searchDomainsElements.add(searchDomainsElement4);
		SearchDomainsDTO searchDomainsDTO = new SearchDomainsDTO(searchDomainsElements, "", "Found 4 occurrence(s).");
		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		when(mapper.toSearchDomainsDTO(domainEntities, "Found 4 occurrence(s)."))
				.thenReturn(searchDomainsDTO);

		SearchDomainsService service = new SearchDomainsService(repository, mapper);
		SearchDomainsDTO actualSearchDomainsDTO = service.searchDomains("name   xyz");
		assertEquals(searchDomainsDTO.getDomains(), actualSearchDomainsDTO.getDomains());
		assertEquals("Found 4 occurrence(s).", actualSearchDomainsDTO.getMessage());
		assertTrue(actualSearchDomainsDTO.getSearchText().isEmpty());
	}

	@Test
	void listDomains() {
		DomainEntity domainEntity1 = new DomainEntity(1L, "name1", "webshop1", "openHours1");
		DomainEntity domainEntity2 = new DomainEntity(2L, "name2", "webshop2", "openHours2");
		List<DomainEntity> domainEntities = new ArrayList<>();
		domainEntities.add(domainEntity1);
		domainEntities.add(domainEntity2);
		DomainRepository repository = Mockito.mock(DomainRepository.class);
		when(repository.findAll())
				.thenReturn(domainEntities);

		SearchDomainsElement searchDomainsElement1 = new SearchDomainsElement(1L, "name1");
		SearchDomainsElement searchDomainsElement2 = new SearchDomainsElement(2L, "name2");
		List<SearchDomainsElement> searchDomainsElements = new ArrayList<>();
		searchDomainsElements.add(searchDomainsElement1);
		searchDomainsElements.add(searchDomainsElement2);
		SearchDomainsDTO searchDomainsDTO = new SearchDomainsDTO(searchDomainsElements, "", "Something went wrong, returned full list.");
		SearchDomainsMapper mapper = Mockito.mock(SearchDomainsMapper.class);
		when(mapper.toSearchDomainsDTO(domainEntities, "Something went wrong, returned full list."))
				.thenReturn(searchDomainsDTO);

		SearchDomainsService service = new SearchDomainsService(repository, mapper);
		SearchDomainsDTO actualSearchDomainsDTO = service.listDomains();
		assertEquals(searchDomainsDTO.getDomains(), actualSearchDomainsDTO.getDomains());
		assertEquals("Something went wrong, returned full list.", actualSearchDomainsDTO.getMessage());
		assertTrue(actualSearchDomainsDTO.getSearchText().isEmpty());
	}
}
