/*
1. Generate the test file via IDE
2. Copy-paste the boilerplate code
3. Change the next words to correct ones and in the next order:
	- Domains
	- Domain
	- domain
4. Add these imports to the import section:
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
*/

@WebMvcTest(FindDomainController.class)
@AutoConfigureDataJpa
class FindDomainControllerTest {

	@Autowired
	private MockMvc mockMvc;
	@MockitoBean
	private FindDomainService service;

	@Test
	void findDomainWithExistingDomain() throws Exception {
		DomainEntity domainEntity = new DomainEntity(12L, "name", "webshop", "openHours");
		String message = "";
		FindDomainDTO findDomainDTO = new FindDomainDTO(domainEntity, message);
		when(service.findDomain(12L))
				.thenReturn(findDomainDTO);

		FindDomainController controller = new FindDomainController(service);

		mockMvc
				.perform(
						get("/domain/12")
				)
				.andExpect(status().isOk())
				.andDo(print())
				.andExpect(view().name("domain"))
				.andExpect(model().size(1))
				.andExpect(model().attribute("domain", findDomainDTO));
	}

	@Test
	void findDomainWithNotExistingDomain() throws Exception {
		DomainEntity domain = new DomainEntity();
		String message = "message";
		FindDomainDTO findDomainDTO = new FindDomainDTO(domain, message);
		when(service.findDomain(12L))
				.thenReturn(findDomainDTO);

		ListDomainsElement element1 = new ListDomainsElement(1L, "name1");
		ListDomainsElement element2 = new ListDomainsElement(2L, "name2");
		List<ListDomainsElement> domains = new ArrayList<>();
		domains.add(element1);
		domains.add(element2);
		ListDomainsDTO listDomainsDTO = new ListDomainsDTO(domains, message);
		when(service.listDomains(message))
				.thenReturn(listDomainsDTO);

		FindDomainController controller = new FindDomainController(service);

		mockMvc
				.perform(
						get("/domain/12")
				)
				.andExpect(status().isOk())
				.andDo(print())
				.andExpect(view().name("domain_list"))
				.andExpect(model().size(1))
				.andExpect(model().attribute("domainList", listDomainsDTO));
	}
}
